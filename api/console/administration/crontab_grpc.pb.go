// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: console/administration/crontab.proto

package administration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Crontab_CreateCrontab_FullMethodName = "/api.console.administration.Crontab/CreateCrontab"
	Crontab_UpdateCrontab_FullMethodName = "/api.console.administration.Crontab/UpdateCrontab"
	Crontab_DeleteCrontab_FullMethodName = "/api.console.administration.Crontab/DeleteCrontab"
	Crontab_GetCrontab_FullMethodName    = "/api.console.administration.Crontab/GetCrontab"
	Crontab_ListCrontab_FullMethodName   = "/api.console.administration.Crontab/ListCrontab"
)

// CrontabClient is the client API for Crontab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrontabClient interface {
	CreateCrontab(ctx context.Context, in *CreateCrontabRequest, opts ...grpc.CallOption) (*CreateCrontabReply, error)
	UpdateCrontab(ctx context.Context, in *UpdateCrontabRequest, opts ...grpc.CallOption) (*UpdateCrontabReply, error)
	DeleteCrontab(ctx context.Context, in *DeleteCrontabRequest, opts ...grpc.CallOption) (*DeleteCrontabReply, error)
	GetCrontab(ctx context.Context, in *GetCrontabRequest, opts ...grpc.CallOption) (*GetCrontabReply, error)
	ListCrontab(ctx context.Context, in *ListCrontabRequest, opts ...grpc.CallOption) (*ListCrontabReply, error)
}

type crontabClient struct {
	cc grpc.ClientConnInterface
}

func NewCrontabClient(cc grpc.ClientConnInterface) CrontabClient {
	return &crontabClient{cc}
}

func (c *crontabClient) CreateCrontab(ctx context.Context, in *CreateCrontabRequest, opts ...grpc.CallOption) (*CreateCrontabReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCrontabReply)
	err := c.cc.Invoke(ctx, Crontab_CreateCrontab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crontabClient) UpdateCrontab(ctx context.Context, in *UpdateCrontabRequest, opts ...grpc.CallOption) (*UpdateCrontabReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCrontabReply)
	err := c.cc.Invoke(ctx, Crontab_UpdateCrontab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crontabClient) DeleteCrontab(ctx context.Context, in *DeleteCrontabRequest, opts ...grpc.CallOption) (*DeleteCrontabReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCrontabReply)
	err := c.cc.Invoke(ctx, Crontab_DeleteCrontab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crontabClient) GetCrontab(ctx context.Context, in *GetCrontabRequest, opts ...grpc.CallOption) (*GetCrontabReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrontabReply)
	err := c.cc.Invoke(ctx, Crontab_GetCrontab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crontabClient) ListCrontab(ctx context.Context, in *ListCrontabRequest, opts ...grpc.CallOption) (*ListCrontabReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCrontabReply)
	err := c.cc.Invoke(ctx, Crontab_ListCrontab_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrontabServer is the server API for Crontab service.
// All implementations must embed UnimplementedCrontabServer
// for forward compatibility.
type CrontabServer interface {
	CreateCrontab(context.Context, *CreateCrontabRequest) (*CreateCrontabReply, error)
	UpdateCrontab(context.Context, *UpdateCrontabRequest) (*UpdateCrontabReply, error)
	DeleteCrontab(context.Context, *DeleteCrontabRequest) (*DeleteCrontabReply, error)
	GetCrontab(context.Context, *GetCrontabRequest) (*GetCrontabReply, error)
	ListCrontab(context.Context, *ListCrontabRequest) (*ListCrontabReply, error)
	mustEmbedUnimplementedCrontabServer()
}

// UnimplementedCrontabServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrontabServer struct{}

func (UnimplementedCrontabServer) CreateCrontab(context.Context, *CreateCrontabRequest) (*CreateCrontabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrontab not implemented")
}
func (UnimplementedCrontabServer) UpdateCrontab(context.Context, *UpdateCrontabRequest) (*UpdateCrontabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrontab not implemented")
}
func (UnimplementedCrontabServer) DeleteCrontab(context.Context, *DeleteCrontabRequest) (*DeleteCrontabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrontab not implemented")
}
func (UnimplementedCrontabServer) GetCrontab(context.Context, *GetCrontabRequest) (*GetCrontabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrontab not implemented")
}
func (UnimplementedCrontabServer) ListCrontab(context.Context, *ListCrontabRequest) (*ListCrontabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrontab not implemented")
}
func (UnimplementedCrontabServer) mustEmbedUnimplementedCrontabServer() {}
func (UnimplementedCrontabServer) testEmbeddedByValue()                 {}

// UnsafeCrontabServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrontabServer will
// result in compilation errors.
type UnsafeCrontabServer interface {
	mustEmbedUnimplementedCrontabServer()
}

func RegisterCrontabServer(s grpc.ServiceRegistrar, srv CrontabServer) {
	// If the following call pancis, it indicates UnimplementedCrontabServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Crontab_ServiceDesc, srv)
}

func _Crontab_CreateCrontab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCrontabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrontabServer).CreateCrontab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crontab_CreateCrontab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrontabServer).CreateCrontab(ctx, req.(*CreateCrontabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crontab_UpdateCrontab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrontabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrontabServer).UpdateCrontab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crontab_UpdateCrontab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrontabServer).UpdateCrontab(ctx, req.(*UpdateCrontabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crontab_DeleteCrontab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrontabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrontabServer).DeleteCrontab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crontab_DeleteCrontab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrontabServer).DeleteCrontab(ctx, req.(*DeleteCrontabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crontab_GetCrontab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrontabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrontabServer).GetCrontab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crontab_GetCrontab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrontabServer).GetCrontab(ctx, req.(*GetCrontabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crontab_ListCrontab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCrontabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrontabServer).ListCrontab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crontab_ListCrontab_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrontabServer).ListCrontab(ctx, req.(*ListCrontabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crontab_ServiceDesc is the grpc.ServiceDesc for Crontab service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crontab_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.console.administration.Crontab",
	HandlerType: (*CrontabServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrontab",
			Handler:    _Crontab_CreateCrontab_Handler,
		},
		{
			MethodName: "UpdateCrontab",
			Handler:    _Crontab_UpdateCrontab_Handler,
		},
		{
			MethodName: "DeleteCrontab",
			Handler:    _Crontab_DeleteCrontab_Handler,
		},
		{
			MethodName: "GetCrontab",
			Handler:    _Crontab_GetCrontab_Handler,
		},
		{
			MethodName: "ListCrontab",
			Handler:    _Crontab_ListCrontab_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/administration/crontab.proto",
}

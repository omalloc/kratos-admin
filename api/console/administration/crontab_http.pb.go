// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: console/administration/crontab.proto

package administration

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCrontabCreateCrontab = "/api.console.administration.Crontab/CreateCrontab"
const OperationCrontabDeleteCrontab = "/api.console.administration.Crontab/DeleteCrontab"
const OperationCrontabGetCrontab = "/api.console.administration.Crontab/GetCrontab"
const OperationCrontabListCrontab = "/api.console.administration.Crontab/ListCrontab"
const OperationCrontabUpdateCrontab = "/api.console.administration.Crontab/UpdateCrontab"

type CrontabHTTPServer interface {
	CreateCrontab(context.Context, *CreateCrontabRequest) (*CreateCrontabReply, error)
	DeleteCrontab(context.Context, *DeleteCrontabRequest) (*DeleteCrontabReply, error)
	GetCrontab(context.Context, *GetCrontabRequest) (*GetCrontabReply, error)
	ListCrontab(context.Context, *ListCrontabRequest) (*ListCrontabReply, error)
	UpdateCrontab(context.Context, *UpdateCrontabRequest) (*UpdateCrontabReply, error)
}

func RegisterCrontabHTTPServer(s *http.Server, srv CrontabHTTPServer) {
	r := s.Route("/")
	r.POST("/api/console/crontab", _Crontab_CreateCrontab0_HTTP_Handler(srv))
	r.PUT("/api/console/crontab/{uid}", _Crontab_UpdateCrontab0_HTTP_Handler(srv))
	r.DELETE("/api/console/crontab/{uid}", _Crontab_DeleteCrontab0_HTTP_Handler(srv))
	r.GET("/api/console/crontab/{uid}", _Crontab_GetCrontab0_HTTP_Handler(srv))
	r.GET("/api/console/crontab", _Crontab_ListCrontab0_HTTP_Handler(srv))
}

func _Crontab_CreateCrontab0_HTTP_Handler(srv CrontabHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCrontabRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrontabCreateCrontab)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCrontab(ctx, req.(*CreateCrontabRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCrontabReply)
		return ctx.Result(200, reply)
	}
}

func _Crontab_UpdateCrontab0_HTTP_Handler(srv CrontabHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCrontabRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrontabUpdateCrontab)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCrontab(ctx, req.(*UpdateCrontabRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCrontabReply)
		return ctx.Result(200, reply)
	}
}

func _Crontab_DeleteCrontab0_HTTP_Handler(srv CrontabHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCrontabRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrontabDeleteCrontab)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCrontab(ctx, req.(*DeleteCrontabRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCrontabReply)
		return ctx.Result(200, reply)
	}
}

func _Crontab_GetCrontab0_HTTP_Handler(srv CrontabHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCrontabRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrontabGetCrontab)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCrontab(ctx, req.(*GetCrontabRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCrontabReply)
		return ctx.Result(200, reply)
	}
}

func _Crontab_ListCrontab0_HTTP_Handler(srv CrontabHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCrontabRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCrontabListCrontab)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCrontab(ctx, req.(*ListCrontabRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCrontabReply)
		return ctx.Result(200, reply)
	}
}

type CrontabHTTPClient interface {
	CreateCrontab(ctx context.Context, req *CreateCrontabRequest, opts ...http.CallOption) (rsp *CreateCrontabReply, err error)
	DeleteCrontab(ctx context.Context, req *DeleteCrontabRequest, opts ...http.CallOption) (rsp *DeleteCrontabReply, err error)
	GetCrontab(ctx context.Context, req *GetCrontabRequest, opts ...http.CallOption) (rsp *GetCrontabReply, err error)
	ListCrontab(ctx context.Context, req *ListCrontabRequest, opts ...http.CallOption) (rsp *ListCrontabReply, err error)
	UpdateCrontab(ctx context.Context, req *UpdateCrontabRequest, opts ...http.CallOption) (rsp *UpdateCrontabReply, err error)
}

type CrontabHTTPClientImpl struct {
	cc *http.Client
}

func NewCrontabHTTPClient(client *http.Client) CrontabHTTPClient {
	return &CrontabHTTPClientImpl{client}
}

func (c *CrontabHTTPClientImpl) CreateCrontab(ctx context.Context, in *CreateCrontabRequest, opts ...http.CallOption) (*CreateCrontabReply, error) {
	var out CreateCrontabReply
	pattern := "/api/console/crontab"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCrontabCreateCrontab))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CrontabHTTPClientImpl) DeleteCrontab(ctx context.Context, in *DeleteCrontabRequest, opts ...http.CallOption) (*DeleteCrontabReply, error) {
	var out DeleteCrontabReply
	pattern := "/api/console/crontab/{uid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrontabDeleteCrontab))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CrontabHTTPClientImpl) GetCrontab(ctx context.Context, in *GetCrontabRequest, opts ...http.CallOption) (*GetCrontabReply, error) {
	var out GetCrontabReply
	pattern := "/api/console/crontab/{uid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrontabGetCrontab))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CrontabHTTPClientImpl) ListCrontab(ctx context.Context, in *ListCrontabRequest, opts ...http.CallOption) (*ListCrontabReply, error) {
	var out ListCrontabReply
	pattern := "/api/console/crontab"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCrontabListCrontab))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CrontabHTTPClientImpl) UpdateCrontab(ctx context.Context, in *UpdateCrontabRequest, opts ...http.CallOption) (*UpdateCrontabReply, error) {
	var out UpdateCrontabReply
	pattern := "/api/console/crontab/{uid}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCrontabUpdateCrontab))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

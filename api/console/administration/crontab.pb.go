// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: console/administration/crontab.proto

package administration

import (
	protobuf "github.com/omalloc/contrib/protobuf"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrontabInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 任务名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 任务表达式
	Expr string `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	// 任务动作
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// 任务描述
	Describe string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	// 上次执行时间
	LastRunAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_run_at,json=lastRunAt,proto3" json:"last_run_at,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CrontabInfo) Reset() {
	*x = CrontabInfo{}
	mi := &file_console_administration_crontab_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrontabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabInfo) ProtoMessage() {}

func (x *CrontabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabInfo.ProtoReflect.Descriptor instead.
func (*CrontabInfo) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{0}
}

func (x *CrontabInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CrontabInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrontabInfo) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CrontabInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CrontabInfo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *CrontabInfo) GetLastRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRunAt
	}
	return nil
}

func (x *CrontabInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CrontabInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateCrontabRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 任务名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 任务表达式
	Expr string `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	// 任务动作
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// 任务描述
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCrontabRequest) Reset() {
	*x = CreateCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrontabRequest) ProtoMessage() {}

func (x *CreateCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrontabRequest.ProtoReflect.Descriptor instead.
func (*CreateCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCrontabRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCrontabRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CreateCrontabRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateCrontabRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCrontabReply) Reset() {
	*x = CreateCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCrontabReply) ProtoMessage() {}

func (x *CreateCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCrontabReply.ProtoReflect.Descriptor instead.
func (*CreateCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{2}
}

type UpdateCrontabRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Uid   int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 任务名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 任务表达式
	Expr string `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	// 任务动作
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// 任务描述
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCrontabRequest) Reset() {
	*x = UpdateCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrontabRequest) ProtoMessage() {}

func (x *UpdateCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrontabRequest.ProtoReflect.Descriptor instead.
func (*UpdateCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCrontabRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateCrontabRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCrontabRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *UpdateCrontabRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateCrontabRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type UpdateCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCrontabReply) Reset() {
	*x = UpdateCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrontabReply) ProtoMessage() {}

func (x *UpdateCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrontabReply.ProtoReflect.Descriptor instead.
func (*UpdateCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{4}
}

type DeleteCrontabRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCrontabRequest) Reset() {
	*x = DeleteCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrontabRequest) ProtoMessage() {}

func (x *DeleteCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrontabRequest.ProtoReflect.Descriptor instead.
func (*DeleteCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCrontabRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type DeleteCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCrontabReply) Reset() {
	*x = DeleteCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrontabReply) ProtoMessage() {}

func (x *DeleteCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrontabReply.ProtoReflect.Descriptor instead.
func (*DeleteCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{6}
}

type GetCrontabRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCrontabRequest) Reset() {
	*x = GetCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrontabRequest) ProtoMessage() {}

func (x *GetCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrontabRequest.ProtoReflect.Descriptor instead.
func (*GetCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{7}
}

func (x *GetCrontabRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *CrontabInfo           `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCrontabReply) Reset() {
	*x = GetCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrontabReply) ProtoMessage() {}

func (x *GetCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrontabReply.ProtoReflect.Descriptor instead.
func (*GetCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{8}
}

func (x *GetCrontabReply) GetData() *CrontabInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type EnableCrontabRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableCrontabRequest) Reset() {
	*x = EnableCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCrontabRequest) ProtoMessage() {}

func (x *EnableCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCrontabRequest.ProtoReflect.Descriptor instead.
func (*EnableCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{9}
}

func (x *EnableCrontabRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type EnableCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableCrontabReply) Reset() {
	*x = EnableCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCrontabReply) ProtoMessage() {}

func (x *EnableCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCrontabReply.ProtoReflect.Descriptor instead.
func (*EnableCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{10}
}

type DisableCrontabRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableCrontabRequest) Reset() {
	*x = DisableCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableCrontabRequest) ProtoMessage() {}

func (x *DisableCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableCrontabRequest.ProtoReflect.Descriptor instead.
func (*DisableCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{11}
}

func (x *DisableCrontabRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type DisableCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableCrontabReply) Reset() {
	*x = DisableCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableCrontabReply) ProtoMessage() {}

func (x *DisableCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableCrontabReply.ProtoReflect.Descriptor instead.
func (*DisableCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{12}
}

type ListCrontabRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *protobuf.Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCrontabRequest) Reset() {
	*x = ListCrontabRequest{}
	mi := &file_console_administration_crontab_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCrontabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrontabRequest) ProtoMessage() {}

func (x *ListCrontabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrontabRequest.ProtoReflect.Descriptor instead.
func (*ListCrontabRequest) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{13}
}

func (x *ListCrontabRequest) GetPagination() *protobuf.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListCrontabReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *protobuf.Pagination   `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Data          []*CrontabInfo         `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCrontabReply) Reset() {
	*x = ListCrontabReply{}
	mi := &file_console_administration_crontab_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCrontabReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrontabReply) ProtoMessage() {}

func (x *ListCrontabReply) ProtoReflect() protoreflect.Message {
	mi := &file_console_administration_crontab_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrontabReply.ProtoReflect.Descriptor instead.
func (*ListCrontabReply) Descriptor() ([]byte, []int) {
	return file_console_administration_crontab_proto_rawDescGZIP(), []int{14}
}

func (x *ListCrontabReply) GetPagination() *protobuf.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCrontabReply) GetData() []*CrontabInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_console_administration_crontab_proto protoreflect.FileDescriptor

var file_console_administration_crontab_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x02, 0x0a,
	0x0b, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x72, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x28, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x25, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x14, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4a, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0xec, 0x05, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x92, 0x01, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61,
	0x62, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x1a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x2f, 0x7b, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x95, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x12, 0x30,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x2f, 0x7b,
	0x75, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x2f, 0x7b, 0x75,
	0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x74, 0x61, 0x62, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x42,
	0x69, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x01, 0x5a,
	0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x2f, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_console_administration_crontab_proto_rawDescOnce sync.Once
	file_console_administration_crontab_proto_rawDescData []byte
)

func file_console_administration_crontab_proto_rawDescGZIP() []byte {
	file_console_administration_crontab_proto_rawDescOnce.Do(func() {
		file_console_administration_crontab_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_console_administration_crontab_proto_rawDesc), len(file_console_administration_crontab_proto_rawDesc)))
	})
	return file_console_administration_crontab_proto_rawDescData
}

var file_console_administration_crontab_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_console_administration_crontab_proto_goTypes = []any{
	(*CrontabInfo)(nil),           // 0: api.console.administration.CrontabInfo
	(*CreateCrontabRequest)(nil),  // 1: api.console.administration.CreateCrontabRequest
	(*CreateCrontabReply)(nil),    // 2: api.console.administration.CreateCrontabReply
	(*UpdateCrontabRequest)(nil),  // 3: api.console.administration.UpdateCrontabRequest
	(*UpdateCrontabReply)(nil),    // 4: api.console.administration.UpdateCrontabReply
	(*DeleteCrontabRequest)(nil),  // 5: api.console.administration.DeleteCrontabRequest
	(*DeleteCrontabReply)(nil),    // 6: api.console.administration.DeleteCrontabReply
	(*GetCrontabRequest)(nil),     // 7: api.console.administration.GetCrontabRequest
	(*GetCrontabReply)(nil),       // 8: api.console.administration.GetCrontabReply
	(*EnableCrontabRequest)(nil),  // 9: api.console.administration.EnableCrontabRequest
	(*EnableCrontabReply)(nil),    // 10: api.console.administration.EnableCrontabReply
	(*DisableCrontabRequest)(nil), // 11: api.console.administration.DisableCrontabRequest
	(*DisableCrontabReply)(nil),   // 12: api.console.administration.DisableCrontabReply
	(*ListCrontabRequest)(nil),    // 13: api.console.administration.ListCrontabRequest
	(*ListCrontabReply)(nil),      // 14: api.console.administration.ListCrontabReply
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*protobuf.Pagination)(nil),   // 16: protobuf.Pagination
}
var file_console_administration_crontab_proto_depIdxs = []int32{
	15, // 0: api.console.administration.CrontabInfo.last_run_at:type_name -> google.protobuf.Timestamp
	15, // 1: api.console.administration.CrontabInfo.created_at:type_name -> google.protobuf.Timestamp
	15, // 2: api.console.administration.CrontabInfo.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 3: api.console.administration.GetCrontabReply.data:type_name -> api.console.administration.CrontabInfo
	16, // 4: api.console.administration.ListCrontabRequest.pagination:type_name -> protobuf.Pagination
	16, // 5: api.console.administration.ListCrontabReply.pagination:type_name -> protobuf.Pagination
	0,  // 6: api.console.administration.ListCrontabReply.data:type_name -> api.console.administration.CrontabInfo
	1,  // 7: api.console.administration.Crontab.CreateCrontab:input_type -> api.console.administration.CreateCrontabRequest
	3,  // 8: api.console.administration.Crontab.UpdateCrontab:input_type -> api.console.administration.UpdateCrontabRequest
	5,  // 9: api.console.administration.Crontab.DeleteCrontab:input_type -> api.console.administration.DeleteCrontabRequest
	7,  // 10: api.console.administration.Crontab.GetCrontab:input_type -> api.console.administration.GetCrontabRequest
	13, // 11: api.console.administration.Crontab.ListCrontab:input_type -> api.console.administration.ListCrontabRequest
	2,  // 12: api.console.administration.Crontab.CreateCrontab:output_type -> api.console.administration.CreateCrontabReply
	4,  // 13: api.console.administration.Crontab.UpdateCrontab:output_type -> api.console.administration.UpdateCrontabReply
	6,  // 14: api.console.administration.Crontab.DeleteCrontab:output_type -> api.console.administration.DeleteCrontabReply
	8,  // 15: api.console.administration.Crontab.GetCrontab:output_type -> api.console.administration.GetCrontabReply
	14, // 16: api.console.administration.Crontab.ListCrontab:output_type -> api.console.administration.ListCrontabReply
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_console_administration_crontab_proto_init() }
func file_console_administration_crontab_proto_init() {
	if File_console_administration_crontab_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_console_administration_crontab_proto_rawDesc), len(file_console_administration_crontab_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_console_administration_crontab_proto_goTypes,
		DependencyIndexes: file_console_administration_crontab_proto_depIdxs,
		MessageInfos:      file_console_administration_crontab_proto_msgTypes,
	}.Build()
	File_console_administration_crontab_proto = out.File
	file_console_administration_crontab_proto_goTypes = nil
	file_console_administration_crontab_proto_depIdxs = nil
}

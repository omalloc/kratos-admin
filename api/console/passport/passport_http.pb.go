// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: console/passport/passport.proto

package passport

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPassportCurrentUser = "/api.console.passport.Passport/CurrentUser"
const OperationPassportLogin = "/api.console.passport.Passport/Login"
const OperationPassportLogout = "/api.console.passport.Passport/Logout"
const OperationPassportRegister = "/api.console.passport.Passport/Register"
const OperationPassportResetPassword = "/api.console.passport.Passport/ResetPassword"
const OperationPassportSendCaptcha = "/api.console.passport.Passport/SendCaptcha"

type PassportHTTPServer interface {
	// CurrentUser 获取当前用户信息
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserReply, error)
	// Login 登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// Logout 登出
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// Register 注册
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	// ResetPassword 重置密码
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	// SendCaptcha 发送验证码
	SendCaptcha(context.Context, *SendCaptchaRequest) (*SendCaptchaReply, error)
}

func RegisterPassportHTTPServer(s *http.Server, srv PassportHTTPServer) {
	r := s.Route("/")
	r.POST("/api/console/passport/login", _Passport_Login0_HTTP_Handler(srv))
	r.POST("/api/console/passport/logout", _Passport_Logout0_HTTP_Handler(srv))
	r.POST("/api/console/passport/register", _Passport_Register0_HTTP_Handler(srv))
	r.POST("/api/console/passport/send_captcha", _Passport_SendCaptcha0_HTTP_Handler(srv))
	r.POST("/api/console/passport/reset_password", _Passport_ResetPassword0_HTTP_Handler(srv))
	r.GET("/api/console/passport/current", _Passport_CurrentUser0_HTTP_Handler(srv))
}

func _Passport_Login0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Passport_Logout0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Passport_Register0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Passport_SendCaptcha0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportSendCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendCaptcha(ctx, req.(*SendCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Passport_ResetPassword0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordReply)
		return ctx.Result(200, reply)
	}
}

func _Passport_CurrentUser0_HTTP_Handler(srv PassportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CurrentUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPassportCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CurrentUser(ctx, req.(*CurrentUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CurrentUserReply)
		return ctx.Result(200, reply)
	}
}

type PassportHTTPClient interface {
	CurrentUser(ctx context.Context, req *CurrentUserRequest, opts ...http.CallOption) (rsp *CurrentUserReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *ResetPasswordReply, err error)
	SendCaptcha(ctx context.Context, req *SendCaptchaRequest, opts ...http.CallOption) (rsp *SendCaptchaReply, err error)
}

type PassportHTTPClientImpl struct {
	cc *http.Client
}

func NewPassportHTTPClient(client *http.Client) PassportHTTPClient {
	return &PassportHTTPClientImpl{client}
}

func (c *PassportHTTPClientImpl) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...http.CallOption) (*CurrentUserReply, error) {
	var out CurrentUserReply
	pattern := "/api/console/passport/current"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPassportCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PassportHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/console/passport/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPassportLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PassportHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/api/console/passport/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPassportLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PassportHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/api/console/passport/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPassportRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PassportHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*ResetPasswordReply, error) {
	var out ResetPasswordReply
	pattern := "/api/console/passport/reset_password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPassportResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PassportHTTPClientImpl) SendCaptcha(ctx context.Context, in *SendCaptchaRequest, opts ...http.CallOption) (*SendCaptchaReply, error) {
	var out SendCaptchaReply
	pattern := "/api/console/passport/send_captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPassportSendCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

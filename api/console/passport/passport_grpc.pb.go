// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: console/passport/passport.proto

package passport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Passport_Login_FullMethodName             = "/api.console.passport.Passport/Login"
	Passport_Logout_FullMethodName            = "/api.console.passport.Passport/Logout"
	Passport_Register_FullMethodName          = "/api.console.passport.Passport/Register"
	Passport_SendCaptcha_FullMethodName       = "/api.console.passport.Passport/SendCaptcha"
	Passport_SendResetPassword_FullMethodName = "/api.console.passport.Passport/SendResetPassword"
	Passport_ResetPassword_FullMethodName     = "/api.console.passport.Passport/ResetPassword"
	Passport_UpdateUsername_FullMethodName    = "/api.console.passport.Passport/UpdateUsername"
	Passport_UpdateProfile_FullMethodName     = "/api.console.passport.Passport/UpdateProfile"
	Passport_CurrentUser_FullMethodName       = "/api.console.passport.Passport/CurrentUser"
)

// PassportClient is the client API for Passport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassportClient interface {
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 登出
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	// 注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 发送验证码
	SendCaptcha(ctx context.Context, in *SendCaptchaRequest, opts ...grpc.CallOption) (*SendCaptchaReply, error)
	// 发送重置密码验证码
	SendResetPassword(ctx context.Context, in *SendResetPasswordCaptchaRequest, opts ...grpc.CallOption) (*SendResetPasswordCaptchaReply, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error)
	// 更新用户名
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameReply, error)
	// 更新用户信息
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileReply, error)
	// 获取当前用户信息
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserReply, error)
}

type passportClient struct {
	cc grpc.ClientConnInterface
}

func NewPassportClient(cc grpc.ClientConnInterface) PassportClient {
	return &passportClient{cc}
}

func (c *passportClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Passport_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, Passport_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Passport_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) SendCaptcha(ctx context.Context, in *SendCaptchaRequest, opts ...grpc.CallOption) (*SendCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCaptchaReply)
	err := c.cc.Invoke(ctx, Passport_SendCaptcha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) SendResetPassword(ctx context.Context, in *SendResetPasswordCaptchaRequest, opts ...grpc.CallOption) (*SendResetPasswordCaptchaReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResetPasswordCaptchaReply)
	err := c.cc.Invoke(ctx, Passport_SendResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordReply)
	err := c.cc.Invoke(ctx, Passport_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUsernameReply)
	err := c.cc.Invoke(ctx, Passport_UpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileReply)
	err := c.cc.Invoke(ctx, Passport_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentUserReply)
	err := c.cc.Invoke(ctx, Passport_CurrentUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassportServer is the server API for Passport service.
// All implementations must embed UnimplementedPassportServer
// for forward compatibility.
type PassportServer interface {
	// 登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// 登出
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// 注册
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	// 发送验证码
	SendCaptcha(context.Context, *SendCaptchaRequest) (*SendCaptchaReply, error)
	// 发送重置密码验证码
	SendResetPassword(context.Context, *SendResetPasswordCaptchaRequest) (*SendResetPasswordCaptchaReply, error)
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	// 更新用户名
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error)
	// 更新用户信息
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileReply, error)
	// 获取当前用户信息
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserReply, error)
	mustEmbedUnimplementedPassportServer()
}

// UnimplementedPassportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPassportServer struct{}

func (UnimplementedPassportServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPassportServer) Logout(context.Context, *LogoutRequest) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPassportServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPassportServer) SendCaptcha(context.Context, *SendCaptchaRequest) (*SendCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCaptcha not implemented")
}
func (UnimplementedPassportServer) SendResetPassword(context.Context, *SendResetPasswordCaptchaRequest) (*SendResetPasswordCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPassword not implemented")
}
func (UnimplementedPassportServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedPassportServer) UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
}
func (UnimplementedPassportServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedPassportServer) CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedPassportServer) mustEmbedUnimplementedPassportServer() {}
func (UnimplementedPassportServer) testEmbeddedByValue()                  {}

// UnsafePassportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassportServer will
// result in compilation errors.
type UnsafePassportServer interface {
	mustEmbedUnimplementedPassportServer()
}

func RegisterPassportServer(s grpc.ServiceRegistrar, srv PassportServer) {
	// If the following call pancis, it indicates UnimplementedPassportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Passport_ServiceDesc, srv)
}

func _Passport_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_SendCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).SendCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_SendCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).SendCaptcha(ctx, req.(*SendCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_SendResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).SendResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_SendResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).SendResetPassword(ctx, req.(*SendResetPasswordCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_UpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_UpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passport_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passport_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Passport_ServiceDesc is the grpc.ServiceDesc for Passport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.console.passport.Passport",
	HandlerType: (*PassportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Passport_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Passport_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Passport_Register_Handler,
		},
		{
			MethodName: "SendCaptcha",
			Handler:    _Passport_SendCaptcha_Handler,
		},
		{
			MethodName: "SendResetPassword",
			Handler:    _Passport_SendResetPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Passport_ResetPassword_Handler,
		},
		{
			MethodName: "UpdateUsername",
			Handler:    _Passport_UpdateUsername_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Passport_UpdateProfile_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _Passport_CurrentUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/passport/passport.proto",
}

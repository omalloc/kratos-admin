// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/omalloc/contrib/kratos/health"
	"github.com/omalloc/contrib/kratos/orm"
	"github.com/omalloc/contrib/kratos/registry"
	"github.com/omalloc/kratos-admin/internal/biz"
	"github.com/omalloc/kratos-admin/internal/conf"
	"github.com/omalloc/kratos-admin/internal/data"
	"github.com/omalloc/kratos-admin/internal/discovery"
	"github.com/omalloc/kratos-admin/internal/event"
	"github.com/omalloc/kratos-admin/internal/server"
	"github.com/omalloc/kratos-admin/internal/service"
)

import (
	_ "github.com/omalloc/kratos-admin/pkg/gorm-schema"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, confServer *conf.Server, confData *conf.Data, passport *conf.Passport, logger log.Logger) (*kratos.App, func(), error) {
	applicationEventPublisher := event.NewApplicationEventPublisher()
	embedEtcdServer, cleanup, err := server.NewEmbedEtcd()
	if err != nil {
		return nil, nil, err
	}
	protobufRegistry := server.NewRegistryConfig(bootstrap)
	client, cleanup2, err := registry.NewEtcd(protobufRegistry)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	registrar := registry.NewRegistrar(client, protobufRegistry)
	registryDiscovery := registry.NewDiscovery(client, protobufRegistry)
	agentClient, err := discovery.NewAgentService(logger, registryDiscovery)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	consoleService := service.NewConsoleService(logger, agentClient)
	dataData, cleanup3, err := data.NewData(confData, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	transaction := orm.NewTransactionManager(dataData)
	userRepo := data.NewUserRepo(transaction)
	roleRepo := data.NewRoleRepo(transaction)
	userUsecase := biz.NewUserUsecase(userRepo, roleRepo, transaction, logger)
	userService := service.NewUserService(userUsecase, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, transaction, logger)
	roleService := service.NewRoleService(roleUsecase)
	permissionRepo := data.NewPermissionRepo(transaction)
	permissionUsecase := biz.NewPermissionUsecase(transaction, permissionRepo)
	permissionService := service.NewPermissionService(permissionUsecase)
	passportService := service.NewPassportService(bootstrap, applicationEventPublisher, userUsecase, client)
	grpcServer := server.NewGRPCServer(confServer, passport, logger, consoleService, userService, roleService, permissionService, passportService)
	httpServer := server.NewHTTPServer(confServer, passport, logger, userService, roleService, permissionService, passportService)
	v := server.NewChecker(dataData, client)
	healthServer := health.NewServer(v, logger, httpServer)
	app := newApp(logger, applicationEventPublisher, embedEtcdServer, registrar, grpcServer, httpServer, healthServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
